name: CI

on:
  pull_request:
  push:
    tags:
      - "**"
    branches:
      - main
  schedule:
    - cron: "0 0 * * *"

jobs:
  generate-config:
    runs-on: ubuntu-latest
    outputs:
      BIRTH_GITHUB_TARGETS: ${{ steps.generate-config.outputs.BIRTH_GITHUB_TARGETS }}
      BIRTH_CMAKE_BUILD_TYPES: ${{ steps.generate-config.outputs.BIRTH_CMAKE_BUILD_TYPES }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Generate config
        id: generate-config
        uses: birth-software/github-config@v2
  build_llvm:
    needs: generate-config
    permissions: write-all
    strategy:
      matrix:
        os: ${{ fromJSON(needs.generate-config.outputs.BIRTH_GITHUB_TARGETS) }}
        CMAKE_BUILD_TYPE: ${{ fromJSON(needs.generate-config.outputs.BIRTH_CMAKE_BUILD_TYPES) }}
    runs-on: ${{ matrix.os }}
    env:
      INSTALL_DIRECTORY: llvm
    steps:
      - uses: actions/checkout@v4
      - uses: birth-software/github-setup@v2
      - name: Build
        shell: bash
        run: |
          set -ex
          ROOT_DIR=$(pwd)
          INSTALL_DIRECTORY_PATH=$ROOT_DIR/$INSTALL_DIRECTORY
          ZSTD_BUILD_DIR=build-zstd
          mkdir -p $ZSTD_BUILD_DIR
          cd $ZSTD_BUILD_DIR
          cmake $ROOT_DIR/zstd -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_ASM_COMPILER=clang -DCMAKE_INSTALL_PREFIX="$INSTALL_DIRECTORY_PATH" -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }}
          cmake --build . --target install
          cd $ROOT_DIR

          ZLIB_BUILD_DIR=build-zlib
          mkdir -p $ZLIB_BUILD_DIR
          cd $ZLIB_BUILD_DIR
          cmake $ROOT_DIR/zlib -G Ninja -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_ASM_COMPILER=clang -DCMAKE_INSTALL_PREFIX="$INSTALL_DIRECTORY_PATH" -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }}
          cmake --build . --target install
          cd $ROOT_DIR

          case $BIRTH_OS in
            windows) OPTIONAL_TRIPLE_ARG="-DLLVM_HOST_TRIPLE=$BIRTH_ARCH";;
            *) OPTIONAL_TRIPLE_ARG="";;
          esac

          LLVM_BUILD_DIR=build-llvm
          mkdir -p $LLVM_BUILD_DIR
          cd $LLVM_BUILD_DIR
          cmake $ROOT_DIR/llvm \
          -G Ninja \
          -DCMAKE_INSTALL_PREFIX="$INSTALL_DIRECTORY_PATH" \
          -DCMAKE_PREFIX_PATH="$INSTALL_DIRECTORY_PATH" \
          -DCMAKE_BUILD_TYPE=${{ matrix.CMAKE_BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DCMAKE_ASM_COMPILER=clang \
          $OPTIONAL_TRIPLE_ARG \
          -DLLVM_PARALLEL_LINK_JOBS=1 \
          -DLLVM_ENABLE_BINDINGS=OFF \
          -DLLVM_ENABLE_LIBEDIT=OFF \
          -DLLVM_ENABLE_LIBPFM=OFF \
          -DLLVM_ENABLE_LIBXML2=OFF \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_PLUGINS=OFF \
          -DLLVM_ENABLE_TERMINFO=OFF \
          -DLLVM_ENABLE_Z3_SOLVER=OFF \
          -DLLVM_INCLUDE_UTILS=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_INCLUDE_BENCHMARKS=OFF \
          -DLLVM_INCLUDE_DOCS=OFF \
          -DLLVM_TOOL_LLVM_LTO2_BUILD=OFF \
          -DLLVM_TOOL_LLVM_LTO_BUILD=OFF \
          -DLLVM_TOOL_LTO_BUILD=OFF \
          -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF
          cmake --build . --target install
          cd $ROOT_DIR
